## 
# This template is based on the official director aws template. Comments are mostly removed.

name: ${CLUSTER_NAME}
environmentName: ${ENVIRONMENT_NAME}
deploymentName: ${CLOUDERA_MANAGER_NAME}

provider {
    type: aws
    accessKeyId: ${AWS_KEY_ID}
    secretAccessKey: ${AWS_SECRET_KEY}
    region: ${AWS_REGION}
    subnetId: ${AWS_SUBNET_ID}
    securityGroupsIds: ${AWS_SECURITY_GROUP_ID}
    instanceNamePrefix: ${AWS_INSTANCE_PREFIX}
    rootVolumeSizeGB: 30 # defaults to 50 GB if not specified
    rootVolumeType: gp2
    associatePublicIpAddresses: true
    useSpotInstances: true
}

ssh {
    username: ${SSH_USERNAME}
    privateKey: ${SSH_PEM_PATH}
}

common-instance-properties {
    image: ${AWS_AMI_ID}
    tags {
        owner: ${CLUSTER_OWNER}
        cluster_name: ${CLUSTER_NAME}
    }
    type: m2.2xlarge
    spotBidUSDPerHr: 0.15
    normalizeInstance: false
    bootstrapScriptsPaths: ["../scripts/secrets.sh",
                            "../scripts/params.sh",
                            "../scripts/normalize_el7.sh",
                            "../scripts/install_java8.sh",
                            "../scripts/install_mysql_connector.sh",
                            "../scripts/install_yum_WA.sh"
                            "../scripts/install_puppet_agent.sh",
                            "../scripts/install_kerberos_client.sh",
                            "../scripts/install_certs_puppet.sh",
                            "../scripts/install_sssd.sh"]
}

instances {
    cm : ${common-instance-properties} {
        tags {
            group: cm-${CLUSTER_NAME}
        }
        instanceNamePrefix: ${CLUSTER_NAME}-cm
    }
    master : ${common-instance-properties} {
        tags {
            group: master-${CLUSTER_NAME}
        }
        instanceNamePrefix: ${CLUSTER_NAME}-master
    }
    worker : ${common-instance-properties} {
        tags {
            group: worker-${CLUSTER_NAME}
        }
        instanceNamePrefix: ${CLUSTER_NAME}-worker
    }
    edge : ${common-instance-properties} {
        tags {
            group: edge-${CLUSTER_NAME}
        }
        instanceNamePrefix: ${CLUSTER_NAME}-edge
        type: m2.xlarge
        spotBidUSDPerHr: 0.10
    }
    kafka : ${common-instance-properties} {
        tags {
            group: kafka-${CLUSTER_NAME}
        }
        instanceNamePrefix: ${CLUSTER_NAME}-kafka
        type: m2.xlarge
        spotBidUSDPerHr: 0.10
    }
    kms : ${common-instance-properties} {
        tags {
            group: kms-${CLUSTER_NAME}
        }   
        instanceNamePrefix: ${CLUSTER_NAME}-kms
        type: m2.xlarge
        spotBidUSDPerHr: 0.10
    }
    kts : ${common-instance-properties} {
        tags {
            group: kts-${CLUSTER_NAME}
        }  
        instanceNamePrefix: ${CLUSTER_NAME}-kts
        type: m2.xlarge
        spotBidUSDPerHr: 0.10
    }
}

databaseServers {
     mysqlDB {
        type: mysql
        host: ${MYSQL_HOST}                                                 
        port: 3306
        user: ${MYSQL_ADMIN}
        password: ${MYSQL_ADMIN_PASS}
     }
}

cloudera-manager {
    csds: [
    "http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.1.0.cloudera1.jar"
    ]
    #enable_faster_bootstrap: true
    instance: ${instances.cm} {}
    enableEnterpriseTrial: true
    javaInstallationStrategy: NONE
    unlimitedJce: false    
    krbAdminUsername: ${KERBEROS_ADMIN_USER}    
    krbAdminPassword: ${KERBEROS_ADMIN_PASS}
    
    databaseTemplates {
        CLOUDERA_MANAGER {
            name: scmt
            databaseServerName: mysqlDB 
            databaseNamePrefix: scm
            usernamePrefix: scm
        }

        ACTIVITYMONITOR {
            name: amont
            databaseServerName: mysqlDB 
            databaseNamePrefix: amon
            usernamePrefix: amon
        }

        REPORTSMANAGER {
            name: rmant
            databaseServerName: mysqlDB 
            databaseNamePrefix: rman
            usernamePrefix: rman
        }

        NAVIGATOR {
            name: navt
            databaseServerName: mysqlDB
            databaseNamePrefix: nav
            usernamePrefix: nav
        }

        NAVIGATORMETASERVER {
            name: navmst
            databaseServerName: mysqlDB
            databaseNamePrefix: navms
            usernamePrefix: navms
        }
    }

    repository: ${CM_REPO}
    repositoryKeyUrl: ${CM_REPO_KEY}

    configs {
         CLOUDERA_MANAGER {
            enable_api_debug: true
            KDC_TYPE: ${KDC_TYPE}             
            KDC_HOST: ${KDC_HOST_NAME}
            SECURITY_REALM: ${REALM_NAME}
            KRB_MANAGE_KRB5_CONF: true
            KRB_ENC_TYPES: ${KRB_ENC_TYPES}

            AD_ACCOUNT_PREFIX: "cdh-"
            AD_DELETE_ON_REGENERATE: "true"
            AD_SET_ENCRYPTION_TYPES: "true"
            AD_USE_SIMPLE_AUTH: "false"
            KDC_ACCOUNT_CREATION_HOST_OVERRIDE: ${KDC_HOST_NAME}

            #WEB_TLS: "true"
            #KEYSTORE_PATH: ${JKS_KEYSTORE}
            #KEYSTORE_PASSWORD: ${JKS_KEYSTORE_PASSWORD}
            #AGENT_TLS: "true"
            #NEED_AGENT_VALIDATION: "true"
            #TRUSTSTORE_PATH: ${JKS_TRUSTSTORE}
            #TRUSTSTORE_PASSWORD: ${JKS_TRUSTSTORE_PASSWORD}

        }
        
        CLOUDERA_MANAGEMENT_SERVICE {
            enable_alerts: false
            enable_config_alerts: false
            ssl_client_truststore_location: ${JKS_TRUSTSTORE}
            ssl_client_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
        }
        
        SERVICEMONITOR {
            firehose_storage_dir: /data0/cloudera-service-monitor
            firehose_non_java_memory_bytes: 4294967296
        }

        ACTIVITYMONITOR {
        }

        HOSTMONITOR {
            firehose_storage_dir: /data0/cloudera-host-monitor
            firehose_non_java_memory_bytes: 4294967296
        }

        REPORTSMANAGER {
            headlamp_scratch_dir: /data0/cloudera-scm-headlamp
        }

        EVENTSERVER {
            eventserver_index_dir: /data0/cloudera-scm-eventserver
        }

        ALERTPUBLISHER {
        }

        NAVIGATOR {
        }

        NAVIGATORMETASERVER {
            data_dir: /data0/cloudera-scm-navigator
            
            # HTTPS/TLS configurations
            ssl_enabled: true
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}

        }

        HOSTS {
        }
    }
}

cluster {
    products {
        CDH: ${CDH_VERSION},
        KUDU: ${KUDU_VERSION},
        SPARK2: ${SPARK2_VERSION},
        KAFKA: ${KAFKA_VERSION}
    }

    parcelRepositories: [${CDH_REPO}, ${SPARK2_REPO}, ${KUDU_REPO}, ${KAFKA_REPO}]

    services: [ HDFS, YARN, ZOOKEEPER, HIVE, HUE, OOZIE, SPARK_ON_YARN, SPARK2_ON_YARN, IMPALA, FLUME, HBASE, SOLR, KS_INDEXER, SENTRY, KAFKA, SQOOP_CLIENT ]

    configs {
        HDFS {
            dfs_ha_fencing_methods: "shell(true)"
            dfs_replication: "3"
            dfs_namenode_acls_enabled: "true"
            dfs_permissions_supergroup: ${HDFS_SUPERGROUP}
            #dfs_umaskmode: "027"
            #hadoop_secure_web_ui: "true"
            hdfs_sentry_sync_enable: "true"

            # TLS/SSL configurations
            hdfs_hadoop_ssl_enabled: true
            ssl_client_truststore_location: ${JKS_TRUSTSTORE}
            ssl_client_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}

            #encryption
            dfs_encrypt_data_transfer: "true"
            hadoop_rpc_protection: "privacy"

            dfs_data_transfer_protection: "privacy"
            dfs_encrypt_data_transfer_algorithm: "AES/CTR/NoPadding"
            hadoop_secure_web_ui: true
        }

        YARN {
            yarn_admin_acl: ${YARN_ADMIN_ACL}

            # TLS/SSL configurations
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
            ssl_client_truststore_location: ${JKS_TRUSTSTORE}
            ssl_client_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}

            hadoop_secure_web_ui: true
        }
        HBASE {
            hbase_hadoop_ssl_enabled: true
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
        }

        HIVE {
            hiveserver2_enable_ssl:  true
            hiveserver2_keystore_path: ${JKS_KEYSTORE}
            hiveserver2_keystore_password: ${JKS_KEYSTORE_PASSWORD}
            hiveserver2_truststore_file: ${JKS_TRUSTSTORE}
            hiveserver2_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
        }

        HUE {


        }

        SENTRY {
            sentry_service_admin_group: ${SENTRY_ADMIN_GROUPS}
        }

        IMPALA {
            # TLS/SSL configurations
            client_services_ssl_enabled: true
            ssl_private_key: ${PEM_KEY}
            ssl_private_key_password: ${PEM_KEY_PASSWORD}
            ssl_server_certificate: ${PEM_CERT}
            ssl_client_ca_certificate: ${PEM_CACERT}
        }
        SOLR {
            solr_use_ssl: true
            solr_https_keystore_file: ${JKS_KEYSTORE}
            solr_https_keystore_password: ${JKS_KEYSTORE_PASSWORD}
            solr_https_truststore_file: ${JKS_TRUSTSTORE}
            solr_https_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
        }

        KAFKA {
           "zookeeper.chroot": "/kafka"
           "auto.create.topics.enable": false
        }
    }

    databaseTemplates: {
        HIVE {
            name: hivet
            databaseServerName: mysqlDB                      
            databaseNamePrefix: hive
            usernamePrefix: hive
        },

        HUE {
            name: huet
            databaseServerName: mysqlDB
            databaseNamePrefix: hue
            usernamePrefix: hue
        },

        OOZIE {
            name: ooziet
            databaseServerName: mysqlDB
            databaseNamePrefix: oozie
            usernamePrefix: oozie
        },

        SENTRY {
            name: sentryt
            databaseServerName: mysqlDB
            databaseNamePrefix: sentry
            usernamePrefix: sentry
        }
    }


    master-1 {
        count: 1

        instance: ${instances.master} {}

        roles {
            HDFS: [NAMENODE, FAILOVERCONTROLLER, JOURNALNODE]
            ZOOKEEPER: [SERVER]
            YARN: [RESOURCEMANAGER, RESOURCEMANAGER]
            SPARK_ON_YARN: [GATEWAY]
            HBASE: [MASTER]
            HIVE: [HIVEMETASTORE]
            YARN: [JOBHISTORY]
        }

        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: ${HDFS_NAMESERVICE}
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: ${HDFS_NAMESERVICE}
                    dfs_name_dir_list: /data0/dfs/nn
                }
                JOURNALNODE {
                    dfs_journalnode_edits_dir: /data0/dfs/jn
                }
            }
            ZOOKEEPER {
                SERVER {
                    dataDir: /data0/zk/data
                    dataLogDir: /data0/zk/log
                    maxClientCnxns: 600
                }
            }
        }
    }

    master-2 {
        count: 1

        instance: ${instances.master} {}

        roles {
            HDFS: [NAMENODE, FAILOVERCONTROLLER, JOURNALNODE, HTTPFS]
            ZOOKEEPER: [SERVER]
            YARN: [RESOURCEMANAGER]
            SPARK_ON_YARN: [GATEWAY]
            HBASE: [MASTER]
            IMPALA: [STATESTORE]
            OOZIE: [OOZIE_SERVER]
        }

        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: ${HDFS_NAMESERVICE}
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: ${HDFS_NAMESERVICE}
                    dfs_name_dir_list: /data0/dfs/nn
                }
                JOURNALNODE {
                    dfs_journalnode_edits_dir: /data0/dfs/jn
                }
                HTTPFS
                {
                    # TLS/SSL configurations
                    httpfs_use_ssl: true
                    httpfs_https_keystore_file: ${JKS_KEYSTORE}
                    httpfs_https_keystore_password: ${JKS_KEYSTORE_PASSWORD}
                    httpfs_https_truststore_file: ${JKS_TRUSTSTORE}
                    httpfs_https_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
                }
            }
            OOZIE {
                OOZIE_SERVER {
                    oozie_plugins_list: "org.apache.oozie.service.ZKLocksService,org.apache.oozie.service.ZKXLogStreamingService,org.apache.oozie.service.ZKJobsConcurrencyService,org.apache.oozie.service.ZKUUIDService"
                    
                    # TLS/SSL configurations
                    oozie_https_keystore_file: ${JKS_KEYSTORE}
                    oozie_https_keystore_password: ${JKS_KEYSTORE_PASSWORD}
                    oozie_https_truststore_file: ${JKS_TRUSTSTORE}
                    oozie_https_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
                }
            } 
            IMPALA {
                STATESTORE {

                    # TLS/SSL configurations
                    webserver_certificate_file: ${PEM_CERT}
                    webserver_private_key_file: ${PEM_KEY}
                    webserver_private_key_password_cmd: ${PEM_KEY_PASSWORD}
                }
            }         
            ZOOKEEPER {
                SERVER {
                    dataDir: /data0/zk/data
                    dataLogDir: /data0/zk/log
                    maxClientCnxns: 600
                }
            }
        }
    }

    master-3 {
        count: 1

        instance: ${instances.master} {}

        roles {
            HDFS: [JOURNALNODE]
            HIVE: [HIVESERVER2]
            HUE: [HUE_SERVER]
            ZOOKEEPER: [SERVER]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER, GATEWAY]
            SPARK2_ON_YARN: [SPARK2_YARN_HISTORY_SERVER]
            IMPALA: [CATALOGSERVER]
            HBASE: [HBASETHRIFTSERVER, HBASERESTSERVER]
            SENTRY: [SENTRY_SERVER]
        }

        configs {
            HDFS {
                JOURNALNODE {
                    dfs_journalnode_edits_dir: /data0/dfs/jn
                }
            }
            HUE {
                HUE_SERVER {

                    # TLS/SSL configurations
                    ssl_enable: true
                    ssl_certificate: ${PEM_CERT}
                    ssl_private_key: ${PEM_KEY}
                    ssl_private_key_password: ${PEM_KEY_PASSWORD}
                    ssl_cacerts: ${PEM_CACERT}
                }
            }
            HIVE {
                HIVESERVER2{
                    hiveserver2_spark_executor_cores: 4
                }
            }
            HBASE {
                HBASERESTSERVER {
                    hbase_restserver_ssl_enable: true
                    hbase_restserver_keystore_file: ${JKS_KEYSTORE}
                    hbase_restserver_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
                    hbase_restserver_keystore_password: ${JKS_KEYSTORE_PASSWORD}

                }
                HBASETHRIFTSERVER {
                    hbase_thriftserver_http_use_ssl: true
                    hbase_thriftserver_http_keystore_file: ${JKS_KEYSTORE}
                    hbase_thriftserver_http_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
                    hbase_thriftserver_http_keystore_password: ${JKS_KEYSTORE_PASSWORD}
                }
            }
            IMPALA {
                CATALOGSERVER {

                    # TLS/SSL configurations
                    webserver_certificate_file: ${PEM_CERT}
                    webserver_private_key_file: ${PEM_KEY}
                    webserver_private_key_password_cmd: ${PEM_KEY_PASSWORD}
                }
            }
            ZOOKEEPER {
                SERVER {
                    dataDir: /data0/zk/data
                    dataLogDir: /data0/zk/log
                    maxClientCnxns: 600
                }
            }
        }
    }

    worker {
        count: ${WORKER_NODE_COUNT}
        minCount: ${WORKER_NODE_COUNT}
        instance: ${instances.worker} {}

        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            IMPALA: [IMPALAD]
            SOLR: [SOLR_SERVER]
            HBASE: [REGIONSERVER]
            KS_INDEXER: [HBASE_INDEXER]
            SPARK2_ON_YARN: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
        }  

        configs {
            HDFS {
                DATANODE {
                    dfs_data_dir_list: "/data0/dfs/dn"
                    dfs_datanode_http_port: 20002
                    dfs_datanode_port: 20003
                }
            }

            YARN {
                NODEMANAGER {
                    yarn_nodemanager_local_dirs: "/data0/yarn/nm"
                    yarn_nodemanager_log_dirs: "/data0/yarn/container-logs"
                }
            }
            IMPALA {
                IMPALAD {
                    scratch_dirs: "/data0/impala/impalad"
                  
                    # TLS/SSL configurations
                    webserver_certificate_file: ${PEM_CERT}
                    webserver_private_key_file: ${PEM_KEY}
                    webserver_private_key_password_cmd: ${PEM_KEY_PASSWORD}
                    impalad_ldap_ca_certificate: ${PEM_CACERT}
                }
            }
      }
    }

    kafka {
        count: ${KAFKA_NODE_COUNT}
        instance: ${instances.kafka}

        roles {
            KAFKA: [KAFKA_BROKER]
        }

        configs {
            KAFKA {
                KAFKA_BROKER {
                    "log.dirs": "/data0/kafka/data"
                    ssl_enabled: true
                    ssl_server_keystore_location: ${JKS_KEYSTORE}
                    ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
                    ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
                    ssl_client_truststore_location: ${JKS_TRUSTSTORE}
                    ssl_client_truststore_password:  ${JKS_TRUSTSTORE_PASSWORD}
                }
            }
        }
    }

    edge {
        count: ${EDGE_NODE_COUNT}

        instance: ${instances.edge} {}

        roles {
            HIVE: [GATEWAY]
            SPARK2_ON_YARN: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
            YARN: [GATEWAY]
            SOLR: [GATEWAY]
            SENTRY: [GATEWAY]
            FLUME: [AGENT]
            HBASE: [GATEWAY]
            SQOOP_CLIENT: [GATEWAY]
        }

    }  

    kms {
        count: ${KMS_NODE_COUNT}
        instance: ${instances.kms} {}
    }  

    kts {
        count: ${KTS_NODE_COUNT}
        instance: ${instances.kts} {}
    }   
}