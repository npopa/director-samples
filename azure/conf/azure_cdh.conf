#
# Copyright (c) 2016 Cloudera, Inc. All rights reserved.
#

name: ${CLUSTER_NAME}

environmentName: ${ENVIRONMENT_NAME}

deploymentName: ${CLOUDERA_MANAGER_NAME}

provider {
    type: azure
    region: ${AZURE_REGION}
    mgmtUrl: "https://management.core.windows.net/"
    subscriptionId: ${AZURE_SUBSCRIPTION_ID}
    aadUrl: "https://login.windows.net/"
    tenantId: ${AZURE_TENANT_ID}
    clientId: ${AZURE_CLIENT_ID}
    clientSecret: ${AZURE_CLIENT_SECRET}
}

ssh {
    username: ${SSH_USERNAME}
    privateKey: ${SSH_PEM_PATH}
}

common-instanceTemplate {

    # Core config fields that are common to all node types
    base {
        type: ${AZURE_BASE_NODE_SIZE}
        image: ${AZURE_OS}
        networkSecurityGroupResourceGroup: ${AZURE_NETWORK_SG_RG}
        networkSecurityGroup: ${AZURE_NETWORK_SG}
        virtualNetworkResourceGroup: ${AZURE_VNET_RG}
        virtualNetwork: ${AZURE_VNET}
        subnetName: ${AZURE_SUBNET}
        hostFqdnSuffix: ${DOMAIN}
        tags {
            owner: ${TAGS_OWNER}
            project: ${TAGS_PROJECT}
        }
        bootstrapScriptsPaths: ["/home/cloudera/bootstrap_RHEL7x.sh","/home/cloudera/install_certs.sh"]
    }

    # Core config fields that are common to all master nodes
    master-base {
        type: ${AZURE_MASTER_NODE_SIZE}
        computeResourceGroup: ${AZURE_COMPUTE_RG}
        availabilitySet: ${AZURE_AVAILABILITY_SET}
        instanceNamePrefix: ${AZURE_MASTER_NAME_PREFIX}
        storageAccountType: ${AZURE_MASTER_STORAGE_TYPE}
        dataDiskSize: ${AZURE_MASTER_DISK_SIZE}
        publicIP: ${AZURE_PUBLIC_IP}
    }

    # Config fields for edge nodes
    management {
        type: ${AZURE_MGMT_NODE_SIZE}
        computeResourceGroup: ${AZURE_COMPUTE_RG}
        availabilitySet: ${AZURE_AVAILABILITY_SET}
        instanceNamePrefix: ${AZURE_MGMT_NAME_PREFIX}
        storageAccountType: ${AZURE_MGMT_STORAGE_TYPE}
        dataDiskCount: ${AZURE_MGMT_DISK_COUNT}
        dataDiskSize: ${AZURE_MGMT_DISK_SIZE}
        publicIP: ${AZURE_PUBLIC_IP}
    }

    # Config fields for master-1 nodes
    master-1 {
        dataDiskCount: ${AZURE_MASTER_DISK_COUNT}
    }

    # Config fields for master-2 nodes
    master-2 {
        dataDiskCount: ${AZURE_MASTER_DISK_COUNT}
    }

    # Config fields for worker nodes
    worker {
        type: ${AZURE_WORKER_NODE_SIZE}
        computeResourceGroup: ${AZURE_COMPUTE_RG}
        availabilitySet: ${AZURE_AVAILABILITY_SET}
        instanceNamePrefix: ${AZURE_WORKER_NAME_PREFIX}
        storageAccountType: ${AZURE_WORKER_STORAGE_TYPE}
        dataDiskCount: ${AZURE_WORKER_DISK_COUNT}
        dataDiskSize: ${AZURE_WORKER_DISK_SIZE}
        publicIP: ${AZURE_PUBLIC_IP}
    }

    # Config fields for edge nodes
    edge {
        type: ${AZURE_EDGE_NODE_SIZE}
        computeResourceGroup: ${AZURE_COMPUTE_RG}
        availabilitySet: ${AZURE_AVAILABILITY_SET}
        instanceNamePrefix: ${AZURE_EDGE_NAME_PREFIX}
        storageAccountType: ${AZURE_EDGE_STORAGE_TYPE}
        dataDiskCount: ${AZURE_EDGE_DISK_COUNT}
        dataDiskSize: ${AZURE_EDGE_DISK_SIZE}
        publicIP: ${AZURE_PUBLIC_IP}
    }

    # Config fields for kms nodes
    kms {
        type: ${AZURE_KMS_NODE_SIZE}
        computeResourceGroup: ${AZURE_COMPUTE_RG}
        availabilitySet: ${AZURE_AVAILABILITY_SET}
        instanceNamePrefix: ${AZURE_KMS_NAME_PREFIX}
        storageAccountType: ${AZURE_KMS_STORAGE_TYPE}
        dataDiskCount: ${AZURE_KMS_DISK_COUNT}
        dataDiskSize: ${AZURE_KMS_DISK_SIZE}
        publicIP: ${AZURE_PUBLIC_IP}
    }
}


bootstrap-script {
    os-generic : """#!/bin/sh
#dummy script
"""
}


#
# Instant Templates
#

instances {

    mgmt {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.management.type}
        computeResourceGroup: ${?common-instanceTemplate.management.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.management.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.management.availabilitySet}
        publicIP: ${?common-instanceTemplate.management.publicIP}
        storageAccountType: ${?common-instanceTemplate.management.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.management.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.management.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        #bootstrapScript: ${?bootstrap-script.os-generic}
        bootstrapScriptsPaths: ${?common-instanceTemplate.base.bootstrapScriptsPaths}

    }

    master-1 {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.master-base.type}
        computeResourceGroup: ${?common-instanceTemplate.master-base.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.master-base.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.master-base.availabilitySet}
        publicIP: ${?common-instanceTemplate.master-base.publicIP}
        storageAccountType: ${?common-instanceTemplate.master-base.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.master-1.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.master-base.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        #bootstrapScript: ${?bootstrap-script.os-generic}
        bootstrapScriptsPaths: ${?common-instanceTemplate.base.bootstrapScriptsPaths}
    }

    master-2 {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.master-base.type}
        computeResourceGroup: ${?common-instanceTemplate.master-base.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.master-base.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.master-base.availabilitySet}
        publicIP: ${?common-instanceTemplate.master-base.publicIP}
        storageAccountType: ${?common-instanceTemplate.master-base.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.master-2.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.master-base.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        #bootstrapScript: ${?bootstrap-script.os-generic}
        bootstrapScriptsPaths: ${?common-instanceTemplate.base.bootstrapScriptsPaths}
    }

    worker {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.worker.type}
        computeResourceGroup: ${?common-instanceTemplate.worker.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.worker.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.worker.availabilitySet}
        publicIP: ${?common-instanceTemplate.worker.publicIP}
        storageAccountType: ${?common-instanceTemplate.worker.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.worker.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.worker.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        #bootstrapScript: ${?bootstrap-script.os-generic}
        bootstrapScriptsPaths: ${?common-instanceTemplate.base.bootstrapScriptsPaths}
    }

    edge {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.edge.type}
        computeResourceGroup: ${?common-instanceTemplate.edge.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.edge.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.edge.availabilitySet}
        publicIP: ${?common-instanceTemplate.edge.publicIP}
        storageAccountType: ${?common-instanceTemplate.edge.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.edge.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.edge.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        #bootstrapScript: ${?bootstrap-script.os-generic}
        bootstrapScriptsPaths: ${?common-instanceTemplate.base.bootstrapScriptsPaths}
    }

    kms {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.kms.type}
        computeResourceGroup: ${?common-instanceTemplate.kms.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.kms.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.kms.availabilitySet}
        publicIP: ${?common-instanceTemplate.kms.publicIP}
        storageAccountType: ${?common-instanceTemplate.kms.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.kms.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.kms.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        #bootstrapScript: ${?bootstrap-script.os-generic}
        bootstrapScriptsPaths: ${?common-instanceTemplate.base.bootstrapScriptsPaths}
    }

} # End instance templates

databaseServers {

    mysqldirector {
        type: ${DB_TYPE}
        host: ${DB_IP} # Cloudera recommends using the static IP address of database server
        port: ${DB_PORT}
        user: ${DB_USER}
        password: ${DB_PASS}
    }

} # End external database configs

cloudera-manager {

    instance: ${instances.mgmt} {
        tags {
            application: "Cloudera Manager 5"
        }
    }

    licensePath: ${CLOUDERA_LICENSE_PATH}

    enableEnterpriseTrial: false

    javaInstallationStrategy: NONE

    unlimitedJce: false

    krbAdminUsername: ${KERBEROS_ADMIN_USER}

    krbAdminPassword: ${KERBEROS_ADMIN_PASS}

    databaseTemplates {
        CLOUDERA_MANAGER {
            name: cmtemplate
            databaseServerName: mysqldirector # Must correspond to an external database server named above
            databaseNamePrefix: scm
            usernamePrefix: cmadmin
        }

        ACTIVITYMONITOR {
            name: amontemplate
            databaseServerName: mysqldirector # Must correspond to an external database server named above
            databaseNamePrefix: amon
            usernamePrefix: amadmin
        }

        REPORTSMANAGER {
            name: rmantemplate
            databaseServerName: mysqldirector # Must correspond to an external database server named above
            databaseNamePrefix: rman
            usernamePrefix: rmadmin
        }

        NAVIGATOR {
            name: navtemplate
            databaseServerName: mysqldirector # Must correspond to an external database server named above
            databaseNamePrefix: nav
            usernamePrefix: nadmin
        }

        # Added in Cloudera Manager 5.2+
        NAVIGATORMETASERVER {
            name: navmetatemplate
            databaseServerName: mysqldirector # Must correspond to an external database server named above
            databaseNamePrefix: navmeta
            usernamePrefix: nmadmin
        }
    }

    repository: ${CM_REPO}
    repositoryKeyUrl: ${CM_REPO_KEY}

    configs {
        CLOUDERA_MANAGER {
            KDC_TYPE: ${KDC_TYPE}
            KDC_HOST: ${KDC_HOST}
            SECURITY_REALM: ${KDC_REALM}
            AD_KDC_DOMAIN: ${KDC_AD_DOMAIN}
            KRB_MANAGE_KRB5_CONF: true
            KRB_ENC_TYPES: ${KRB_ENC_TYPES}
            AD_ACCOUNT_PREFIX: "cdh-"
            AD_DELETE_ON_REGENERATE: "true"
            AD_SET_ENCRYPTION_TYPES: "true"
            AD_USE_SIMPLE_AUTH: "false"
            KDC_ACCOUNT_CREATION_HOST_OVERRIDE: ${KDC_HOST}


            ###  Configuring External Authentiction for Cloudera Manager   ###
            AUTH_BACKEND_ORDER: "LDAP_ONLY"
            LDAP_URL: ${LDAP_URL}
            NT_DOMAIN: ${KDC_REALM}
            LDAP_BIND_DN: ${LDAP_ADMIN_USER}
            LDAP_BIND_PW: ${LDAP_ADMIN_PASS}
            LDAP_ADMIN_GROUPS: ${CM_ADMIN_GROUPS}
            LDAP_USER_GROUPS: ${CM_USER_GROUPS}
            LDAP_NAVIGATOR_ADMIN_GROUPS: ${NAV_ADMIN_GROUPS}
            LDAP_GROUP_SEARCH_FILTER: "member={0}"
            LDAP_USER_SEARCH_FILTER: "sAMAccountName={0}"
        }

        CLOUDERA_MANAGEMENT_SERVICE {
            enable_alerts : false
            enable_config_alerts : false
            ssl_client_truststore_location: ${JKS_TRUSTSTORE}
            ssl_client_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
        }

        SERVICEMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
            firehose_storage_dir: /data0/lib/cloudera-service-monitor
            firehose_non_java_memory_bytes: 4294967296
        }

        ACTIVITYMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
        }

        HOSTMONITOR {
            mgmt_log_dir: /data0/log/cloudera-scm-firehose
            firehose_storage_dir: /data0/lib/cloudera-host-monitor
            firehose_non_java_memory_bytes: 4294967296
        }

        REPORTSMANAGER {
            headlamp_scratch_dir: /data0/lib/cloudera-scm-headlamp
            mgmt_log_dir: /data0/log/cloudera-scm-headlamp
        }

        EVENTSERVER {
            mgmt_log_dir: /data0/log/cloudera-scm-eventserver
            eventserver_index_dir: /data0/lib/cloudera-scm-eventserver
        }

        ALERTPUBLISHER {
            mgmt_log_dir: /data0/log/cloudera-scm-alertpublisher
        }

        NAVIGATOR {
            mgmt_log_dir: /data0/log/cloudera-scm-navigator
        }

        NAVIGATORMETASERVER {
            audit_event_log_dir: /data0/log/cloudera-scm-navigator/audit
            data_dir: /data0/lib/cloudera-scm-navigator
            mgmt_log_dir: /data0/log/cloudera-scm-navigator
            
            # HTTPS/TLS configurations
            ssl_enabled: true
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}

            auth_backend_order: "EXTERNAL_THEN_CM"
            external_auth_type: "ACTIVE_DIRECTORY"
            nav_ldap_url: ${NAV_LDAP_URL}
            nav_nt_domain: ${KDC_REALM}
            nav_ldap_bind_dn: ${LDAP_ADMIN_USER}
            nav_ldap_bind_pw: ${LDAP_ADMIN_PASS}
            nav_ldap_group_search_base: ${NAV_LDAP_GROUP_SEARCH_BASE}
            nav_ldap_group_search_filter: "member={0}"
            nav_ldap_groups_search_filter: "(&(objectClass=group)(cn=*{0}*))"
            nav_ldap_user_search_base: ${NAV_LDAP_USER_SEARCH_BASE}
            nav_ldap_user_search_filter: "sAMAccountName={0}"
        }

        # Configuration properties for all hosts
        HOSTS {
        }
    }
} # End CM configuration

#
# Highly Available Cluster description
#

cluster {

    products {
        CDH: ${CDH_VERSION}
    }

    parcelRepositories: ["CDH_REPO"]

    services: [CLUSTER_SERVICES]

    configs {
        # HDFS fencing should be set to true for HA configurations
        HDFS {
            dfs_ha_fencing_methods: "shell(true)"
            dfs_replication: "3"
            #dfs_block_local_path_access_user: "impala,mapred,spark"
            dfs_namenode_acls_enabled: "true"
            dfs_permissions_supergroup: ${HDFS_SUPERGROUP}
            #dfs_umaskmode: "027"
            #hadoop_secure_web_ui: "true"
            hdfs_sentry_sync_enable: "true"

            # TLS/SSL configurations
            hdfs_hadoop_ssl_enabled: true
            ssl_client_truststore_location: ${JKS_TRUSTSTORE}
            ssl_client_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
        }

        OOZIE {
            oozie_use_ssl: true
            #oozie_load_balancer: "oozie_load_balancer_REPLACE_ME:11000"
        }

        YARN {
            #hadoop_secure_web_ui: "true"
            yarn_admin_acl: ${YARN_ADMIN_ACL}
            
            # TLS/SSL configurations
            ssl_server_keystore_location: ${JKS_KEYSTORE}
            ssl_server_keystore_keypassword: ${JKS_KEYSTORE_PASSWORD}
            ssl_server_keystore_password: ${JKS_KEYSTORE_PASSWORD}
        }

        HIVE {
            audit_event_log_dir: /data0/log/hive/audit
            lineage_event_log_dir: /data0/log/hive/lineage
            hiveserver2_enable_ssl:  true
            hiveserver2_keystore_path: ${JKS_KEYSTORE}
            hiveserver2_keystore_password: ${JKS_KEYSTORE_PASSWORD}
            hiveserver2_truststore_file: ${JKS_TRUSTSTORE}
            hiveserver2_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
        }

        HUE {
            auth_backend: "desktop.auth.backend.LdapBackend"
            ldap_url: ${HUE_LDAP_URL}
            use_start_tls: ${HUE_LDAPS_FLAG}
            bind_dn: ${HUE_LDAP_ADMIN_USER}
            bind_password: ${LDAP_ADMIN_PASS}
            base_dn: ${HUE_LDAP_SEARCH_BASE}
            create_users_on_login: "true"
            nt_domain: ${KDC_REALM}
            search_bind_authentication: "true"
        }

        SENTRY {
            sentry_service_admin_group: ${SENTRY_ADMIN_GROUPS}
        }

        IMPALA {
            # TLS/SSL configurations
            client_services_ssl_enabled: true
            ssl_private_key: ${PEM_KEY}
            ssl_private_key_password: ${PEM_KEY_PASSWORD}
            ssl_server_certificate: ${PEM_CERT}
            ssl_client_ca_certificate: ${PEM_CACERT}
        }
    }

    databaseTemplates: {
        HIVE {
            name: hivetemplate
            databaseServerName: mysqldirector
            databaseNamePrefix: hivemetastore
            usernamePrefix: hive
        }

        HUE {
            name: huetemplate
            databaseServerName: mysqldirector
            databaseNamePrefix: huedb
            usernamePrefix: hue
        }

        OOZIE {
            name: oozietemplate
            databaseServerName: mysqldirector
            databaseNamePrefix: ooziedb
            usernamePrefix: oozie
        }

        SENTRY {
            name: sentrytemplate
            databaseServerName: mysqldirector
            databaseNamePrefix: sentrydb
            usernamePrefix: sentry
        }

    }

    masters-1 {
        count: ${MASTER_HA_NODE_COUNT}

        instance: ${instances.master-1} {
            tags {
                group: masters-1
            }
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [NAMENODE, FAILOVERCONTROLLER, JOURNALNODE]
            YARN: [RESOURCEMANAGER]
        }

        configs {
            HDFS {
                NAMENODE {
                    dfs_federation_namenode_nameservice: ${HDFS_NAMESERVICE}
                    autofailover_enabled: true
                    dfs_namenode_quorum_journal_name: ${HDFS_NAMESERVICE}

                    namenode_log_dir: /data0/log/hadoop-hdfs
                    dfs_name_dir_list: /data3/dfs/nn
                }
                FAILOVERCONTROLLER
                {
                    failover_controller_log_dir: /data0/log/hadoop-hdfs
                }
                JOURNALNODE
                {
                  journalnode_log_dir: /data0/log/hadoop-hdfs
                  dfs_journalnode_edits_dir: /data1/hdfs
                }
            }
            ZOOKEEPER {
                SERVER {
                    zk_server_log_dir: /data0/log/zookeeper
                    dataDir: /data2/zookeeper
                    dataLogDir: /data2/zookeeper
                    maxClientCnxns: 1024
                }
            }
            YARN {
              RESOURCEMANAGER {
                resource_manager_log_dir: /data0/log/hadoop-yarn
              }
            }
        }
    }

    masters-2 {
        count: ${MASTER_NODE_COUNT}

        instance: ${instances.master-2} {
            tags {
                group: masters-2
            }
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [JOURNALNODE, HTTPFS]
            HIVE: [HIVESERVER2, HIVEMETASTORE, WEBHCAT]
            YARN: [JOBHISTORY]
            HUE: [HUE_SERVER]
            OOZIE: [OOZIE_SERVER]
            IMPALA: [CATALOGSERVER, STATESTORE]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
            SENTRY: [SENTRY_SERVER]
        }

        configs {
            HDFS {
                JOURNALNODE
                {
                    journalnode_log_dir: /data0/log/hadoop-hdfs
                    dfs_journalnode_edits_dir: /data1/hdfs
                }
                HTTPFS
                {
                    httpfs_log_dir: /data0/log/hadoop-httpfs
                    # TLS/SSL configurations
                    httpfs_use_ssl: true
                    httpfs_https_keystore_file: ${JKS_KEYSTORE}
                    httpfs_https_keystore_password: ${JKS_KEYSTORE_PASSWORD}
                    httpfs_https_truststore_file: ${JKS_TRUSTSTORE}
                    httpfs_https_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
                }
            }
            OOZIE {
                OOZIE_SERVER {
                    oozie_plugins_list: "org.apache.oozie.service.ZKLocksService,org.apache.oozie.service.ZKXLogStreamingService,org.apache.oozie.service.ZKJobsConcurrencyService,org.apache.oozie.service.ZKUUIDService"
                    oozie_log_dir: /data0/log/oozie
                    
                    # TLS/SSL configurations
                    oozie_https_keystore_file: ${JKS_KEYSTORE}
                    oozie_https_keystore_password: ${JKS_KEYSTORE_PASSWORD}
                    oozie_https_truststore_file: ${JKS_TRUSTSTORE}
                    oozie_https_truststore_password: ${JKS_TRUSTSTORE_PASSWORD}
                }
            }
            ZOOKEEPER {
                SERVER {
                    zk_server_log_dir: /data0/log/zookeeper
                    dataDir: /data2/zookeeper
                    dataLogDir: /data2/zookeeper
                    maxClientCnxns: 1024
                }
            }
            HIVE {
                HIVEMETASTORE {
                    hive_log_dir: /data0/log/hive
                }
                HIVESERVER2 {
                    hive_log_dir: /data0/log/hive
                }
                WEBHCAT {
                    hcatalog_log_dir: /data0/log/hcatalog
                }
            }
            YARN {
                JOBHISTORY {
                    mr2_jobhistory_log_dir: /data0/log/hadoop-mapreduce
                }
            }
            HUE {
                HUE_SERVER {
                    hue_server_log_dir: /data0/log/hue

                    # TLS/SSL configurations
                    ssl_enable: true
                    ssl_certificate: ${PEM_CERT}
                    ssl_private_key: ${PEM_KEY}
                    ssl_private_key_password: ${PEM_KEY_PASSWORD}
                    ssl_cacerts: ${PEM_CACERT}
                }
                KT_RENEWER {
                    kt_renewer_log_dir: /data0/log/hue
                }
            }
            IMPALA {
                CATALOGSERVER {
                    log_dir: /data0/log/catalogd

                    # TLS/SSL configurations
                    webserver_certificate_file: ${PEM_CERT}
                    webserver_private_key_file: ${PEM_KEY}
                    webserver_private_key_password_cmd: ${PEM_KEY_PASSWORD}
                }
                STATESTORE {
                    log_dir: /data0/log/statestore

                    # TLS/SSL configurations
                    webserver_certificate_file: ${PEM_CERT}
                    webserver_private_key_file: ${PEM_KEY}
                    webserver_private_key_password_cmd: ${PEM_KEY_PASSWORD}
                }
            }
            SPARK_ON_YARN {
                SPARK_YARN_HISTORY_SERVER {
                    log_dir: /data0/log/spark
                }
            }
        }
    }

    workers {
        count: ${WORKER_NODE_COUNT}
        minCount: 4

        instance: ${instances.worker} {
            tags {
                group: worker
            }
        }

        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            IMPALA: [IMPALAD]
        }

        configs {
            HDFS {
                DATANODE {
                    datanode_log_dir: /data0/log/hadoop-hdfs
                    dfs_data_dir_list: "/data1/dfs/dn,/data2/dfs/dn,/data3/dfs/dn,/data4/dfs/dn,/data5/dfs/dn,/data6/dfs/dn,/data7/dfs/dn,/data8/dfs/dn,/data9/dfs/dn,/data10/dfs/dn"
                    dfs_datanode_failed_volumes_tolerated: 5            # Should be half the number of data drives
                }
            }
            YARN {
                NODEMANAGER {
                    node_manager_log_dir: /data0/log/hadoop-yarn
                    yarn_nodemanager_log_dirs: "/data1/log/hadoop-yarn/container,/data2/log/hadoop-yarn/container,/data3/log/hadoop-yarn/container,/data4/log/hadoop-yarn/container,/data5/log/hadoop-yarn/container,/data6/log/hadoop-yarn/container,/data7/log/hadoop-yarn/container,/data8/log/hadoop-yarn/container,/data9/log/hadoop-yarn/container,/data10/log/hadoop-yarn/container"
                    yarn_nodemanager_local_dirs: "/data1/yarn,/data2/yarn,/data3/yarn,/data4/yarn,/data5/yarn,/data6/yarn,/data7/yarn,/data8/yarn,/data9/yarn,/data10/yarn"
                }
            }
            IMPALA {
                IMPALAD {
                    log_dir: /data0/log/impalad
                    lineage_event_log_dir: /data0/log/impalad/lineage
                    audit_event_log_dir: /data0/log/impalad/audit
                    scratch_dirs: "/data1/impala/impalad,/data2/impala/impalad,/data3/impala/impalad,/data4/impala/impalad,/data5/impala/impalad,/data6/impala/impalad,/data7/impala/impalad,/data8/impala/impalad,/data9/impala/impalad,/data10/impala/impalad"
                  
                    # TLS/SSL configurations
                    webserver_certificate_file: ${PEM_CERT}
                    webserver_private_key_file: ${PEM_KEY}
                    webserver_private_key_password_cmd: ${PEM_KEY_PASSWORD}
                    impalad_ldap_ca_certificate: ${PEM_CACERT}
                }
            }
        }
    }

    gateways {
      count: ${GATEWAY_NODE_COUNT}

      instance: ${instances.edge} {
        tags {
          group: gateway
        }
      }

      roles {
        HIVE: [GATEWAY]
        SPARK_ON_YARN: [GATEWAY]
        YARN: [GATEWAY]
        SENTRY: [GATEWAY]
        FLUME: [AGENT]
      }

   }

    kms {
      count: ${KMS_NODE_COUNT}

      instance: ${instances.kms} {
        tags {
          group: kms
        }
      }
   }
}


